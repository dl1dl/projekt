// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using projekt.Data;

namespace projekt.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20190501151912_RecipeModelChange")]
    partial class RecipeModelChange
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.8-servicing-32085")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("projekt.Models.Category", b =>
                {
                    b.Property<int>("CategoryID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("CategoryID");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("projekt.Models.Comment", b =>
                {
                    b.Property<int>("CommentID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AuthorId");

                    b.Property<string>("Body");

                    b.Property<int?>("RecipeID");

                    b.HasKey("CommentID");

                    b.HasIndex("AuthorId");

                    b.HasIndex("RecipeID");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("projekt.Models.DifficultyLevel", b =>
                {
                    b.Property<int>("DifficultyLevelID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("DifficultyLevelID");

                    b.ToTable("DifficultyLevels");
                });

            modelBuilder.Entity("projekt.Models.Recipe", b =>
                {
                    b.Property<int>("RecipeID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AuthorId");

                    b.Property<string>("Body");

                    b.Property<int?>("CategoryID");

                    b.Property<int?>("DifficultyLevelID");

                    b.Property<string>("Name");

                    b.HasKey("RecipeID");

                    b.HasIndex("AuthorId");

                    b.HasIndex("CategoryID");

                    b.HasIndex("DifficultyLevelID");

                    b.ToTable("Recipes");
                });

            modelBuilder.Entity("projekt.Models.WebAppUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<string>("Email");

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail");

                    b.Property<string>("NormalizedUserName");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.ToTable("WebAppUser");
                });

            modelBuilder.Entity("projekt.Models.Comment", b =>
                {
                    b.HasOne("projekt.Models.WebAppUser", "Author")
                        .WithMany("Comments")
                        .HasForeignKey("AuthorId");

                    b.HasOne("projekt.Models.Recipe", "Recipe")
                        .WithMany("Comments")
                        .HasForeignKey("RecipeID");
                });

            modelBuilder.Entity("projekt.Models.Recipe", b =>
                {
                    b.HasOne("projekt.Models.WebAppUser", "Author")
                        .WithMany("Recipes")
                        .HasForeignKey("AuthorId");

                    b.HasOne("projekt.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryID");

                    b.HasOne("projekt.Models.DifficultyLevel", "DifficultyLevel")
                        .WithMany()
                        .HasForeignKey("DifficultyLevelID");
                });
#pragma warning restore 612, 618
        }
    }
}
